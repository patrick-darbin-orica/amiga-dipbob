/**
  ******************************************************************************
  * @file    binmaster_protocol.h
  * @author  Protogen
  * @brief   Protocol Header File
  *
  *          Autogenerated header covering enumerators of the protocol
  *
  ******************************************************************************
  */

#ifndef __BINMASTER_PROTOCOL_H
#define __BINMASTER_PROTOCOL_H

/* Includes ------------------------------------------------------------------*/
#include <stdint.h>
/* Private typedef -----------------------------------------------------------*/
typedef enum {
    PROTOCOL_ERROR = 0,
    PROTOCOL_SUCCESS = 1
} ProtocolErrorStatus;

typedef enum {
    CYCLE = 0,
    SET_ASCENT_RATE = 1,
    SET_DESCENT_RATE = 2,
    SET_TIMEOUT = 3,
    SET_RAMP_RATE = 4,
    GET_ASCENT_RATE = 5,
    GET_DESCENT_RATE = 6,
    GET_TIMEOUT = 7,
    GET_RAMP_RATE = 8,
    GET_PREVIOUS_LEVEL = 9,
    SEND_MOTOR_UP = 10,
    SEND_MOTOR_DOWN = 11,
	SEND_MOTOR_STOP = 12
} ProtocolCommands;

/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* External function prototypes -----------------------------------------------*/

ProtocolErrorStatus processProtocolCommand(uint8_t *data, uint16_t length);
void execute_cycle(void);
void execute_set_ascent_rate(uint8_t *data, uint16_t length);
void execute_set_descent_rate(uint8_t *data, uint16_t length);
void execute_set_timeout(uint8_t *data, uint16_t length);
void execute_set_ramp_rate(uint8_t *data, uint16_t length);
void execute_get_ascent_rate(void);
void execute_get_descent_rate(void);
void execute_get_timeout(uint8_t *data, uint16_t length);
void execute_get_ramp_rate(void);
void execute_get_previous_level(void);
void execute_send_motor_up(void);
void execute_send_motor_down(void);
void execute_send_motor_stop(void);

#endif /* __BINMASTER_PROTOCOL_H */